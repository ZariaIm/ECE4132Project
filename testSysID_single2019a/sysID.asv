function [TF, IC] = sysID(patient)
% Use this template to design an open-loop system identification routine given
% the step time response of the patient. 

%% input response
% The input response is loaded here and used to simulate the patient to produce 
% the step response. Feel free to alter this section as needed to try different
% types of inputs that may help with the identification process
[time_vec, Food, InsulinRate] = inputVector();

% Simulate the open loop response of the generated patient
Sugar = openLoopSim(patient,Food,InsulinRate);

% Get Sugar values at time_vec time. This is basic linear interpolation and
% is nessesary because Simulink does not guarantee Sugar.Time will equal time_vec
sugar_vec = interp1(Sugar.Time,Sugar.Data,time_vec,'linear');

%% system identification
%Find the peaks in the data, this is when the slope changes sign
[maxPKS,maxLOCS] = findpeaks(sugar_vec,time_vec);
[minPKS,minLOCS] = findpeaks(-sugar_vec,time_vec);
minPKS = -minPKS; 

%Find the min and max 
min_val = min(sugar_vec);
max_val = max(sugar_vec);
%Find steady state value
steady = sugar_vec(end)

%In the example we ignore the peaks, min and max and just output a first order 
%response shifted by 160 
%Produce first order transfer function as output
s = tf('s');
% TF = -(max_val-min_val)*(4/(600*s+4)); %this one is like the reference
% ^^ just changed the value for steady state and simplified the transfer
% func

% OS
os = (minPKS - steady)/steady
tp = minLOCS(1)
%ts = +-2%
tsarray = logical((steady-0.02*steady)<sugar_vec & sugar_vec<(steady+0.02*steady));
for i = 0:length(tsarray)-1
    i_rev = length(tsarray)-i;
    if(tsarray(i_rev) == 0)
        n = n+1;
        save = i_rev;
        ts = 
    end
end

% tr = %10-90%
stepinfo(sugar_vec, time_vec)

wn = 1.8/(minLOCS(1)/2.5); %~0.0054
damp = 0.9;
%wn and damp based on tr and os?

TF = -(max_val-steady)*((wn^2)/( (s^2) + (2*wn*damp*s) + (wn^2))); 
%^^ works okay for some things (better than ref) 
% except when second oscillation is quite large
%or if steady state difference is small

%Produce initial condition (offset from zero)
IC = max_val; %changed the start value to the max value

end